import 'dotenv/config';
import linebot from 'linebot';
import axios from 'axios';
import { distance } from '../utils/distance.js'

const bot = linebot({
    channelId: process.env.CHANNEL_ID,
    channelSecret: process.env.CHANNEL_SECRET,
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN
});

// Êñ∞Â¢û‰∏ÄÂÄãÊò†Â∞ÑÂáΩÊï∏‰æÜËôïÁêÜÁâπÂÆöÂ≠ó‰∏≤
const queryMapping = {
    'ÊàëÊòØË≤ìÊ¥æ': 'Ë≤ì',
    'ÊàëÊòØÁãóÊ¥æ': 'Áãó',
    'ÊàëÊòØ??': 'ÂÖ∂‰ªñ'
};

// Âú®botÂàùÂßãÂåñÈÉ®ÂàÜÊñ∞Â¢û‰∏ÄÂÄãÈõÜÂêà‰æÜÂ≠òÂÑ≤Â∑≤È°ØÁ§∫ÁöÑÂãïÁâ©ID
const shownAnimals = new Set();

bot.on('message', async (event) => {
    if (event.message.type !== 'text' || !event.message.text) {
        // Â¶ÇÊûúÊ∂àÊÅØ‰∏çÊòØÊñáÊú¨È°ûÂûãÊàñËÄÖÊñáÊú¨ÂÖßÂÆπÊòØÁ©∫ÁöÑÔºåÂâá‰∏çËôïÁêÜ
        return;
    }
    const inputText = event.message.text.trim().toLowerCase();
    // Á¢∫‰øù inputText ‰∏çÊòØ undefined
    if (!inputText) {
        // ËôïÁêÜ inputText ÊòØ undefined ÁöÑÊÉÖÊ≥Å
        return;
    }
    try {
        const response = await axios.get('https://data.moa.gov.tw/Service/OpenData/TransService.aspx?UnitId=QcbUEzN6E6DL');
        if (!response.data || !Array.isArray(response.data)) {
            console.error('Error: Expected an array of data');
            // ËôïÁêÜÈåØË™§ÊÉÖÊ≥ÅÔºå‰æãÂ¶ÇÈÄöÈÅéÂõûÂæ©Ê∂àÊÅØÂëäÁü•Áî®Êà∂
            await event.reply({ type: 'text', text: 'ÁÑ°Ê≥ïÁç≤ÂèñÂãïÁâ©Êï∏ÊìöÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ' });
            return;
        }
        const animalsData = response.data;

        // Ëß£ÊûêÁî®Êà∂Ëº∏ÂÖ•ÁöÑÊü•Ë©¢Ê¢ù‰ª∂
        let queries = inputText.split(' ').filter(q => q); // ÁßªÈô§Á©∫Â≠óÁ¨¶‰∏≤

        // ‰ΩøÁî®Êò†Â∞ÑÂáΩÊï∏ËôïÁêÜÁâπÂÆöÊü•Ë©¢Ê¢ù‰ª∂
        queries = queries.map(query => queryMapping[query] || query);


        // ÁâπÂÆöÊü•Ë©¢Ê¢ù‰ª∂ÁöÑËôïÁêÜ
        if (inputText === 'ÊàëÊòØË≤ìÊ¥æ') {
            queries.push('Ë≤ì');
        } else if (inputText === 'ÊàëÊòØÁãóÊ¥æ') {
            queries.push('Áãó');
        } else if (inputText.startsWith('ÊàëÊòØÂÖ∂‰ªñ')) {
            queries.push(inputText.replace('ÊàëÊòØÂÖ∂‰ªñ', '').trim());
        } else if (inputText === '‰ΩøÁî®Ë™™Êòé') {
            await event.reply({ type: 'text', text: 'üìÑÈ†òÈ§äÊü•Ë©¢Ôºå‰ΩøÁî®Ë™™ÊòéÔºöüìÑ\n\nüòºüê∂‚ùìÈ°ûÂà•Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöË≤ì„ÄÅÁãóÊàñÂÖ∂‰ªñ\n\nËä±Ëâ≤Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•Ôºö‰∏âËä±„ÄÅËôéÊñë„ÄÅÁôΩËâ≤„ÄÅÈªëËâ≤„ÄÅÈªÉËâ≤...\n\nÊÄßÂà•Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöÂÖ¨ÊàñÊØç\n\nÊâÄÂú®Âú∞ÂçÄÊü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöËá∫ÁÅ£ÂêÑÁ∏£Â∏ÇÔºöËá∫Âåó„ÄÅÂ±èÊù±„ÄÅÊæéÊπñ...\n\n' });
            return;
        }

        // ÁØ©ÈÅ∏Âá∫Á¨¶ÂêàÁî®Êà∂Êü•Ë©¢ÁöÑÂãïÁâ©Ë≥áÊñô
        let filteredAnimals = animalsData.filter(animal => {
            const sex = animal.animal_sex === 'M' ? 'ÂÖ¨' : 'ÊØç';
            const kind = animal.animal_kind.trim().toLowerCase();
            const color = animal.animal_colour.trim().toLowerCase();
            const address = animal.shelter_address.trim().toLowerCase();
            return queries.every(query =>
                sex.includes(query) ||
                kind.includes(query) ||
                color.includes(query) ||
                address.includes(query)
            );
        })
        const replies = data
            .map(d => {
                d.distance = distance(d.L_MapY, d.L_MapX, event.message.latitude, event.message.longitude, 'K')
                return d
            })
            .sort((a, b) => {
                return a.distance - b.distance
            })
            .slice(0, 10) // Êü•Ë©¢Âç°ÁâáÂâáÊï∏ÊúÄÂ§ö10Ââá ÂÆòÊñπË¶èÂÆö

            .map(d => {
                const t = template()
                t.body.contents[0].text = d.LL_Title
                t.body.contents[1].text = d.LL_Highlights
                t.body.contents[2].contents[0].contents[1].text = d.LL_Country + d.LL_Area + d.LL_Address
                t.body.contents[2].contents[1].contents[1].text = d.LL_OpeningData
                t.body.contents[2].contents[2].contents[1].text = d.LL_OpeningTime
                t.footer.contents[0].action.uri = `https://www.google.com/maps/search/?api=1&query=${d.L_MapY},${d.L_MapX}`
                t.footer.contents[1].action.uri = `https://taiwangods.moi.gov.tw/html/landscape/1_0011.aspx?i=${d.L_ID}`
                return t
            })


        // Â¶ÇÊûúÊâÄÊúâÂãïÁâ©ÈÉΩÂ∑≤È°ØÁ§∫ÔºåÂâáÊ∏ÖÁ©∫Â∑≤È°ØÁ§∫ÂãïÁâ©IDÈô£Âàó‰∏¶ÈáçÊñ∞ÈñãÂßã
        if (filteredAnimals.length === 0 && shownAnimals.size === animalsData.length) {
            shownAnimals.clear();
            filteredAnimals = animalsData;
        }

        // ÂæûÊú™È°ØÁ§∫ÁöÑÂãïÁâ©‰∏≠Èö®Ê©üÈÅ∏Êìá10ÂÄã
        filteredAnimals = filteredAnimals.sort(() => 0.5 - Math.random()).slice(0, 10);

        // Êõ¥Êñ∞Â∑≤È°ØÁ§∫ÁöÑÂãïÁâ©IDÈô£Âàó
        filteredAnimals.forEach(animal => shownAnimals.add(animal.animal_id));


        if (filteredAnimals.length > 0) {
            // ÂâµÂª∫Flex Message
            const flexMessage = {
                type: 'flex',
                altText: 'ÂãïÁâ©Ë≥áË®ä',
                contents: {
                    type: 'carousel',
                    contents: filteredAnimals.map(animal => {
                        const areaName = animal.shelter_address.trim();
                        const sex = animal.animal_sex === 'M' ? 'ÂÖ¨' : animal.animal_sex === 'F' ? 'ÊØç' : 'Êú™Áü•';
                        // Â∞áÂú∞ÂùÄËΩâÊèõÁÇ∫URLÁ∑®Á¢ºÊ†ºÂºè
                        const mapQuery = encodeURIComponent(areaName);
                        // ÂâµÂª∫GoogleÂú∞ÂúñÁöÑURL
                        const mapUrl = `https://www.google.com/maps/search/?api=1&query=${mapQuery}`;
                        return {
                            type: 'bubble',
                            hero: {
                                type: 'image',
                                url: animal.album_file, // ÂúñÁâáURL
                                size: 'full',
                                aspectRatio: '20:13',
                                aspectMode: 'cover'
                            },
                            body: {
                                type: 'box',
                                layout: 'vertical',
                                contents: [
                                    {
                                        type: 'text',
                                        text: animal.animal_kind, // ÂìÅÁ®Æ
                                        weight: 'bold',
                                        size: 'xl'
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        margin: 'lg',
                                        spacing: 'sm',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: `È°ûÂà•: ${animal.animal_kind}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `ÊÄßÂà•: ${sex}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Ëä±Ëâ≤: ${animal.animal_colour}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Ê©üÊßã: ${animal.shelter_name}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Âú∞ÂùÄ: ${areaName}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `ÈõªË©±: ${animal.shelter_tel}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            }
                                        ]
                                    }
                                ]
                            },

                            footer: {
                                type: 'box',
                                layout: 'vertical',
                                spacing: 'sm',
                                contents: [
                                    {
                                        type: 'button',
                                        style: 'link',
                                        height: 'sm',
                                        action: {
                                            type: 'uri',
                                            label: 'Âú∞Âúñ',
                                            uri: mapUrl
                                        }
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        contents: [],
                                        margin: 'sm'
                                    }
                                ],
                                flex: 0
                            },

                        };
                    })
                }
            }

            // ‰ΩøÁî®axiosÁôºÈÄÅÂõûÊáâ
            await axios({
                method: 'post',
                url: 'https://api.line.me/v2/bot/message/reply',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.CHANNEL_ACCESS_TOKEN}`
                },
                data: {
                    replyToken: event.replyToken,
                    messages: [flexMessage]
                }
            });

        } else {

            await event.reply({ type: 'text', text: 'Êâæ‰∏çÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÂãïÁâ©ÔºåË´ãÂòóË©¶ÂÖ∂‰ªñÈóúÈçµÂ≠ó„ÄÇ' });
        }
    } catch (error) {
        console.error('Error:', error);
        await event.reply({ type: 'text', text: 'Êü•Ë©¢ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ' });
    }
});

bot.listen('/', 3000, () => {
    console.log('Bot ÂïüÂãï‰∏≠...');
});

