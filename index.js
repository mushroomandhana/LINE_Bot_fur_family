import 'dotenv/config'
import linebot from 'linebot'
import axios from 'axios'

const bot = linebot({
    channelId: process.env.CHANNEL_ID,
    channelSecret: process.env.CHANNEL_SECRET,
    channelAccessToken: process.env.CHANNEL_ACCESS_TOKEN
})

const queryMapping = {
    'ÊàëÊòØË≤ìÊ¥æ': 'Ë≤ì',
    'ÊàëÊòØÁãóÊ¥æ': 'Áãó',
    'ÊàëÊòØ??': 'ÂÖ∂‰ªñ',
    'ÂÖ∂‰ªñ': 'ÂÖ∂‰ªñ'
};

let animalsData = []; // Â∞á‰æÜÂæûAPIÁç≤ÂèñÂãïÁâ©Ë≥áÊñô

// Êñ∞Â¢û queryHistory Êò†Â∞Ñ
const queryHistory = new Map();

function escapeRegExp(string) {
    return string.replace(/[.*+?^${}()|[\]\\]/g, '\\$&');
}

// Áï∞Ê≠•ÂáΩÂºèÔºöÂæûAPIÁç≤ÂèñÂãïÁâ©Ë≥áÊñô‰∏¶Â≠òÂÑ≤Âú®animalsData‰∏≠
async function fetchAnimalsData() {
    try {
        const response = await axios.get('https://data.moa.gov.tw/Service/OpenData/TransService.aspx?UnitId=QcbUEzN6E6DL');
        animalsData = response.data;
    } catch (error) {
        console.error('Error fetching animal data:', error);
    }
}

// ÂàùÂßãÂåñÊôÇÂü∑Ë°å‰∏ÄÊ¨°ÂãïÁâ©Ë≥áÊñôÁöÑÂø´Âèñ
fetchAnimalsData();

bot.on('message', async (event) => {
    try {
        if (event.message.type !== 'text' || !event.message.text) {
            return; // ÈùûÊñáÊú¨Ê∂àÊÅØÊàñÊñáÊú¨ÂÖßÂÆπÁÇ∫Á©∫ÔºåÁõ¥Êé•ËøîÂõû
        }

        const inputText = event.message.text.trim().toLowerCase();
        let queries = inputText.split(/\s+/); // Split input into separate queries

        // ÁâπÂÆöÊü•Ë©¢Ê¢ù‰ª∂ÁöÑËôïÁêÜÔºåÁßªÂà∞ÈÅéÊøæ‰πãÂâç
        if (inputText === 'ÊàëÊòØË≤ìÊ¥æ') {
            queries.push('Ë≤ì');
        } else if (inputText === 'ÊàëÊòØÁãóÊ¥æ') {
            queries.push('Áãó');
        } else if (inputText.startsWith('ÊàëÊòØ??')) {
            queries.push('ÂÖ∂‰ªñ');
        } else if (inputText === '‰ΩøÁî®Ë™™Êòé') {
            await event.reply({
                type: 'text',
                text: 'üìÑÈ†òÈ§äÊü•Ë©¢Ôºå‰ΩøÁî®Ë™™ÊòéÔºöüìÑ\n\nüòºüê∂‚ùìÈ°ûÂà•Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöË≤ì„ÄÅÁãóÊàñÂÖ∂‰ªñ\n\nËä±Ëâ≤Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•Ôºö‰∏âËä±„ÄÅËôéÊñë„ÄÅÁôΩËâ≤„ÄÅÈªëËâ≤„ÄÅÈªÉËâ≤...\n\nÊÄßÂà•Êü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöÂÖ¨ÊàñÊØç\n\nÊâÄÂú®Âú∞ÂçÄÊü•Ë©¢ÔºåË´ãËº∏ÂÖ•ÔºöËá∫ÁÅ£ÂêÑÁ∏£Â∏ÇÔºöËá∫Âåó„ÄÅÂ±èÊù±„ÄÅÊæéÊπñ...\n\n'
            });
            return;
        }

        // Ëß£ÊûêÁî®Êà∂Ëº∏ÂÖ•ÁöÑÊü•Ë©¢Ê¢ù‰ª∂
        queries = queries.map(query => queryMapping[query] || query);

        // Âæû queryHistory Êò†Â∞Ñ‰∏≠Áç≤Âèñ‰πãÂâçÁöÑÊü•Ë©¢ÁµêÊûú
        const previousResults = queryHistory.get(event.message.text) || new Set();

        // Èö®Ê©üÊâì‰∫Ç animalsData Èô£Âàó
        let shuffledAnimals = animalsData.sort(() => 0.5 - Math.random());

        // ÈÅéÊøæÂá∫ÈÇÑÊ≤íÊúâÈ°ØÁ§∫ÈÅéÁöÑÂãïÁâ©
        let filteredAnimals = shuffledAnimals.filter(animal => !previousResults.has(animal.animal_id));

        // Â¶ÇÊûúÈÅéÊøæÂæåÁöÑÁµêÊûú‰∏çË∂≥10ÂÄãÔºåÂâáÂæûÂ∑≤È°ØÁ§∫ÁöÑÂãïÁâ©‰∏≠Èö®Ê©üÈÅ∏ÊìáË£úÂÖÖ
        if (filteredAnimals.length < 10) {
            const supplementAnimals = shuffledAnimals.filter(animal => previousResults.has(animal.animal_id)).sort(() => 0.5 - Math.random());
            filteredAnimals = [...filteredAnimals, ...supplementAnimals.slice(0, 10 - filteredAnimals.length)];
        }

        // Êõ¥Êñ∞ queryHistory Êò†Â∞Ñ
        filteredAnimals.forEach(animal => previousResults.add(animal.animal_id));
        queryHistory.set(event.message.text, previousResults);

        if (filteredAnimals.length > 0) {
            // ÂâµÂª∫Flex Message
            const flexMessage = {
                type: 'flex',
                altText: 'ÂãïÁâ©Ë≥áË®ä',
                contents: {
                    type: 'carousel',
                    contents: filteredAnimals.map(animal => {
                        const areaName = animal.shelter_address.trim();
                        const sex = animal.animal_sex === 'M' ? 'ÂÖ¨' : animal.animal_sex === 'F' ? 'ÊØç' : 'Êú™Áü•';
                        const mapQuery = encodeURIComponent(areaName);
                        const mapUrl = `https://www.google.com/maps/search/?api=1&query=${mapQuery}`;

                        return {
                            type: 'bubble',
                            hero: {
                                type: 'image',
                                url: animal.album_file,
                                size: 'full',
                                aspectRatio: '20:13',
                                aspectMode: 'cover'
                            },
                            body: {
                                type: 'box',
                                layout: 'vertical',
                                contents: [
                                    {
                                        type: 'text',
                                        text: animal.animal_kind,
                                        weight: 'bold',
                                        size: 'xl'
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        margin: 'lg',
                                        spacing: 'sm',
                                        contents: [
                                            {
                                                type: 'text',
                                                text: `È°ûÂà•: ${animal.animal_kind}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `ÊÄßÂà•: ${sex}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Ëä±Ëâ≤: ${animal.animal_colour}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Ê©üÊßã: ${animal.shelter_name}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `Âú∞ÂùÄ: ${animal.shelter_address}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            },
                                            {
                                                type: 'text',
                                                text: `ÈõªË©±: ${animal.shelter_tel}`,
                                                color: '#aaaaaa',
                                                size: 'sm'
                                            }
                                        ]
                                    }
                                ]
                            },
                            footer: {
                                type: 'box',
                                layout: 'vertical',
                                spacing: 'sm',
                                contents: [
                                    {
                                        type: 'button',
                                        style: 'link',
                                        height: 'sm',
                                        action: {
                                            type: 'uri',
                                            label: 'Âú∞ÂúñÊâæÊàë',
                                            uri: mapUrl
                                        }
                                    },
                                    {
                                        type: 'box',
                                        layout: 'vertical',
                                        contents: [],
                                        margin: 'sm'
                                    },
                                    {
                                        type: 'button',
                                        style: 'link',
                                        height: 'sm',
                                        action: {
                                            type: 'uri',
                                            label: 'Á∂≤Á´ôÊü•Ë©¢',
                                            uri: 'https://www.pet.gov.tw/AnimalApp/AnnounceMent.aspx?PageType=Adopt'
                                        }
                                    }
                                ],
                                flex: 0
                            }
                        };
                    })
                }
            };

            // ‰ΩøÁî®axiosÁôºÈÄÅÂõûÊáâ
            await axios({
                method: 'post',
                url: 'https://api.line.me/v2/bot/message/reply',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${process.env.CHANNEL_ACCESS_TOKEN}`
                },
                data: {
                    replyToken: event.replyToken,
                    messages: [flexMessage]
                }
            });

        } else {
            // Â¶ÇÊûúÊâæ‰∏çÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÂãïÁâ©
            await event.reply({ type: 'text', text: 'Êâæ‰∏çÂà∞Á¨¶ÂêàÊ¢ù‰ª∂ÁöÑÂãïÁâ©„ÄÇË´ãÂòóË©¶ÂÖ∂‰ªñÈóúÈçµÂ≠ó„ÄÇ' });
        }
    } catch (error) {
        console.error('Error:', error);
        await event.reply({ type: 'text', text: 'Êü•Ë©¢ÊôÇÁôºÁîüÈåØË™§ÔºåË´ãÁ®çÂæåÂÜçË©¶„ÄÇ' });
    }
});

bot.listen('/', 3000, () => {
    console.log('Bot ÂïüÂãï‰∏≠...');
});
